{"version":3,"sources":["ng://ng-multiselect-dropdown-angular7/multiselect.model.ts","ng://ng-multiselect-dropdown-angular7/multiselect.component.ts","ng://ng-multiselect-dropdown-angular7/click-outside.directive.ts","ng://ng-multiselect-dropdown-angular7/list-filter.pipe.ts","ng://ng-multiselect-dropdown-angular7/ng-multiselect-dropdown-angular7.module.ts"],"names":["ListItem","source","this","id","text","DROPDOWN_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MultiSelectComponent","multi","noop","cdr","_data","selectedItems","isDropdownOpen","_placeholder","filter","data","defaultSettings","singleSelection","idField","textField","enableCheckAll","selectAllText","unSelectAllText","allowSearchFilter","limitSelection","clearSearchFilter","maxHeight","itemsShowLimit","searchPlaceholderText","noDataAvailablePlaceholderText","closeDropDownOnSelection","showSelectedItemsAtTop","defaultOpen","disabled","onFilterChange","EventEmitter","onDropDownClose","onSelect","onDeSelect","onSelectAll","onDeSelectAll","onTouchedCallback","onChangeCallback","Object","defineProperty","prototype","value","_settings","assign","_this","map","item","onFilterTextChange","$event","emit","onItemClick","found","isSelected","allowAdd","length","removeSelected","addSelected","closeDropdown","setDisabledState","isDisabled","writeValue","undefined","firstItem","e","splice","registerOnChange","fn","registerOnTouched","onTouched","trackByFn","index","clickedItem","forEach","isLimitSelectionReached","isAllItemsSelected","showButton","itemShowRemaining","push","emittedValue","itemSel","indexOf","val","selected","Array","isArray","objectify","obj","toggleDropdown","evt","preventDefault","setTimeout","temp","Section","nativeElement","querySelectorAll","childNodes","focus","toggleDropdownExternal","dropdownbtn","click","toggleSelectAll","slice","Component","args","selector","template","styles","providers","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","ViewChild","Input","Output","HostListener","ClickOutsideDirective","_elementRef","clickOutside","onClick","event","targetElement","contains","Directive","ElementRef","ListFilterPipe","transform","items","applyFilter","toLowerCase","Pipe","name","pure","NgMultiSelectDropDownModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["export interface IDropdownSettings {\r\n  singleSelection?: boolean;\r\n  idField?: string;\r\n  textField?: string;\r\n  enableCheckAll?: boolean;\r\n  selectAllText?: string;\r\n  unSelectAllText?: string;\r\n  allowSearchFilter?: boolean;\r\n  clearSearchFilter?: boolean;\r\n  maxHeight?: number;\r\n  itemsShowLimit?: number;\r\n  limitSelection?: number;\r\n  searchPlaceholderText?: string;\r\n  noDataAvailablePlaceholderText?: string;\r\n  closeDropDownOnSelection?: boolean;\r\n  showSelectedItemsAtTop?: boolean;\r\n  defaultOpen?: boolean;\r\n}\r\n\r\nexport class ListItem {\r\n  id: String;\r\n  text: String;\r\n\r\n  public constructor(source: any) {\r\n    if (typeof source === 'string') {\r\n      this.id = this.text = source;\r\n    }\r\n    if (typeof source === 'object') {\r\n      this.id = source.id;\r\n      this.text = source.text;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  HostListener,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { ListItem, IDropdownSettings } from './multiselect.model';\r\n\r\nexport const DROPDOWN_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MultiSelectComponent),\r\n  multi: true\r\n};\r\nconst noop = () => { };\r\n\r\n@Component({\r\n  selector: 'ng-multiselect-dropdown-angular7',\r\n  template: `<div tabindex=\"=0\" (blur)=\"onTouched()\" class=\"multiselect-dropdown\" (clickOutside)=\"closeDropdown()\">\r\n  <div [class.disabled]=\"disabled\">\r\n    <span #dropdownBtn tabindex=\"-1\" class=\"dropdown-btn\" (click)=\"toggleDropdown($event);\">\r\n      <span *ngIf=\"selectedItems.length == 0\">{{_placeholder}}</span>\r\n      <span class=\"selected-item\" *ngFor=\"let item of selectedItems;trackBy: trackByFn;let k = index\" [hidden]=\"k > _settings.itemsShowLimit-1\">\r\n        {{item.text}}\r\n        <a style=\"padding-top:2px;padding-left:2px;color:white\" (click)=\"onItemClick($event,item)\">x</a>\r\n      </span>\r\n      <span style=\"float:right !important;padding-right:4px\">\r\n        <span style=\"padding-right: 6px;\" *ngIf=\"itemShowRemaining()>0\">+{{itemShowRemaining()}}</span>\r\n        <span [ngClass]=\"_settings.defaultOpen ? 'dropdown-up' : 'dropdown-down'\"></span>\r\n      </span>\r\n    </span>\r\n  </div>\r\n  <div class=\"dropdown-list\" [hidden]=\"!_settings.defaultOpen\" #Section>\r\n    <ul class=\"item1\">\r\n      <li (click)=\"toggleSelectAll()\" *ngIf=\"_data.length > 0 && !_settings.singleSelection && _settings.enableCheckAll && _settings.limitSelection===-1\" class=\"multiselect-item-checkbox\" style=\"border-bottom: 1px solid #ccc;padding:10px\">\r\n        <input type=\"checkbox\" aria-label=\"multiselect-select-all\" [checked]=\"isAllItemsSelected()\" [disabled]=\"disabled || isLimitSelectionReached()\" />\r\n        <div>{{!isAllItemsSelected() ? _settings.selectAllText : _settings.unSelectAllText}}</div>\r\n      </li>\r\n      <li class=\"filter-textbox\" *ngIf=\"_data.length>0 && _settings.allowSearchFilter\">\r\n        <input type=\"text\" #searchTextBox aria-label=\"multiselect-search\" autofocus [readOnly]=\"disabled\" [placeholder]=\"_settings.searchPlaceholderText\" [(ngModel)]=\"filter.text\" (ngModelChange)=\"onFilterTextChange($event)\">\r\n      </li>\r\n    </ul>\r\n    <ul class=\"item2\" [style.maxHeight]=\"_settings.maxHeight+'px'\">\r\n      <li *ngFor=\"let item of _data | ng2ListFilter:filter; let i = index;\" (click)=\"onItemClick($event,item)\" class=\"multiselect-item-checkbox\">\r\n        <input type=\"checkbox\" aria-label=\"multiselect-item\" [checked]=\"isSelected(item)\" [disabled]=\"disabled || (isLimitSelectionReached() && !isSelected(item))\" />\r\n        <div>{{item.text}}</div>\r\n      </li>\r\n      <li class='no-data' *ngIf=\"_data.length == 0\">\r\n        <h5>{{_settings.noDataAvailablePlaceholderText}}</h5>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>`,\r\n  styles: [`.multiselect-dropdown{position:relative;width:100%;font-size:inherit;font-family:inherit}.multiselect-dropdown .dropdown-btn{display:inline-block;border:1px solid #adadad;width:100%;padding:6px 12px;margin-bottom:0;font-weight:400;line-height:1.52857143;text-align:left;vertical-align:middle;cursor:pointer;background-image:none;border-radius:4px}.multiselect-dropdown .dropdown-btn .selected-item{border:1px solid #337ab7;margin-right:4px;background:#337ab7;padding:0 5px;color:#fff;border-radius:2px;float:left}.multiselect-dropdown .dropdown-btn .selected-item a{text-decoration:none}.multiselect-dropdown .dropdown-btn .selected-item:hover{box-shadow:1px 1px #959595}.multiselect-dropdown .dropdown-btn .dropdown-down{display:inline-block;top:10px;width:0;height:0;border-top:10px solid #adadad;border-left:10px solid transparent;border-right:10px solid transparent}.multiselect-dropdown .dropdown-btn .dropdown-up{display:inline-block;width:0;height:0;border-bottom:10px solid #adadad;border-left:10px solid transparent;border-right:10px solid transparent}.multiselect-dropdown .disabled>span{background-color:#eceeef}.dropdown-list{position:absolute;padding-top:6px;width:100%;z-index:9999;border:1px solid #ccc;border-radius:3px;background:#fff;margin-top:10px;box-shadow:0 1px 5px #959595}.dropdown-list ul{padding:0;list-style:none;overflow:auto;margin:0}.dropdown-list li{padding:6px 10px;cursor:pointer;text-align:left}.dropdown-list .filter-textbox{border-bottom:1px solid #ccc;position:relative;padding:10px}.dropdown-list .filter-textbox input{border:0;width:100%;padding:0 0 0 26px}.dropdown-list .filter-textbox input:focus{outline:0}.multiselect-item-checkbox input[type=checkbox]{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.multiselect-item-checkbox input[type=checkbox]:focus+div:before,.multiselect-item-checkbox input[type=checkbox]:hover+div:before{border-color:#337ab7;background-color:#f2f2f2}.multiselect-item-checkbox input[type=checkbox]:active+div:before{transition-duration:0s}.multiselect-item-checkbox input[type=checkbox]+div{position:relative;padding-left:2em;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;margin:0;color:#000}.multiselect-item-checkbox input[type=checkbox]+div:before{box-sizing:content-box;content:'';color:#337ab7;position:absolute;top:50%;left:0;width:14px;height:14px;margin-top:-9px;border:2px solid #337ab7;text-align:center;transition:.4s}.multiselect-item-checkbox input[type=checkbox]+div:after{box-sizing:content-box;content:'';position:absolute;-webkit-transform:scale(0);transform:scale(0);-webkit-transform-origin:50%;transform-origin:50%;transition:transform .2s ease-out,-webkit-transform .2s ease-out;background-color:transparent;top:50%;left:4px;width:8px;height:3px;margin-top:-4px;border-style:solid;border-color:#fff;border-width:0 0 3px 3px;-o-border-image:none;border-image:none;-webkit-transform:rotate(-45deg) scale(0);transform:rotate(-45deg) scale(0)}.multiselect-item-checkbox input[type=checkbox]:disabled+div:before{border-color:#ccc}.multiselect-item-checkbox input[type=checkbox]:disabled:focus+div:before .multiselect-item-checkbox input[type=checkbox]:disabled:hover+div:before{background-color:inherit}.multiselect-item-checkbox input[type=checkbox]:disabled:checked+div:before{background-color:#ccc}.multiselect-item-checkbox input[type=checkbox]:checked+div:after{content:'';transition:transform .2s ease-out,-webkit-transform .2s ease-out;-webkit-transform:rotate(-45deg) scale(1);transform:rotate(-45deg) scale(1)}.multiselect-item-checkbox input[type=checkbox]:checked+div:before{-webkit-animation:.2s ease-in borderscale;animation:.2s ease-in borderscale;background:#337ab7}@-webkit-keyframes borderscale{50%{box-shadow:0 0 0 2px #337ab7}}@keyframes borderscale{50%{box-shadow:0 0 0 2px #337ab7}}`],\r\n  providers: [DROPDOWN_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MultiSelectComponent implements ControlValueAccessor {\r\n  public _settings: IDropdownSettings;\r\n  public _data: Array<ListItem> = [];\r\n  public selectedItems: Array<ListItem> = [];\r\n  public isDropdownOpen = true;\r\n  @ViewChild('dropdownBtn') dropdownbtn: ElementRef;\r\n  @ViewChild('Section') Section: ElementRef;\r\n\r\n  _placeholder = 'Select';\r\n  filter: ListItem = new ListItem(this.data);\r\n  defaultSettings: IDropdownSettings = {\r\n    singleSelection: false,\r\n    idField: 'id',\r\n    textField: 'text',\r\n    enableCheckAll: true,\r\n    selectAllText: 'Select All',\r\n    unSelectAllText: 'UnSelect All',\r\n    allowSearchFilter: false,\r\n    limitSelection: -1,\r\n    clearSearchFilter: true,\r\n    maxHeight: 197,\r\n    itemsShowLimit: 999999999999,\r\n    searchPlaceholderText: 'Search',\r\n    noDataAvailablePlaceholderText: 'No data available',\r\n    closeDropDownOnSelection: false,\r\n    showSelectedItemsAtTop: false,\r\n    defaultOpen: false\r\n  };\r\n\r\n  @Input()\r\n  public set placeholder(value: string) {\r\n    if (value) {\r\n      this._placeholder = value;\r\n    } else {\r\n      this._placeholder = 'Select';\r\n    }\r\n  }\r\n  @Input()\r\n  disabled = false;\r\n\r\n  @Input()\r\n  public set settings(value: IDropdownSettings) {\r\n    if (value) {\r\n      this._settings = Object.assign(this.defaultSettings, value);\r\n    } else {\r\n      this._settings = Object.assign(this.defaultSettings);\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  public set data(value: Array<any>) {\r\n    if (!value) {\r\n      this._data = [];\r\n    } else {\r\n      // const _items = value.filter((item: any) => {\r\n      //   if (typeof item === 'string' || (typeof item === 'object' && item && item[this._settings.idField] && item[this._settings.textField])) {\r\n      //     return item;\r\n      //   }\r\n      // });\r\n      this._data = value.map(\r\n        (item: any) =>\r\n          typeof item === 'string'\r\n            ? new ListItem(item)\r\n            : new ListItem({\r\n              id: item[this._settings.idField],\r\n              text: item[this._settings.textField]\r\n            })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Output('onFilterChange')\r\n  onFilterChange: EventEmitter<ListItem> = new EventEmitter<any>();\r\n  @Output('onDropDownClose')\r\n  onDropDownClose: EventEmitter<ListItem> = new EventEmitter<any>();\r\n\r\n  @Output('onSelect')\r\n  onSelect: EventEmitter<ListItem> = new EventEmitter<any>();\r\n\r\n  @Output('onDeSelect')\r\n  onDeSelect: EventEmitter<ListItem> = new EventEmitter<any>();\r\n\r\n  @Output('onSelectAll')\r\n  onSelectAll: EventEmitter<Array<ListItem>> = new EventEmitter<Array<any>>();\r\n\r\n  @Output('onDeSelectAll')\r\n  onDeSelectAll: EventEmitter<Array<ListItem>> = new EventEmitter<Array<any>>();\r\n\r\n  private onTouchedCallback: () => void = noop;\r\n  private onChangeCallback: (_: any) => void = noop;\r\n\r\n  onFilterTextChange($event) {\r\n    this.onFilterChange.emit($event);\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) { }\r\n\r\n  onItemClick($event: any, item: ListItem) {\r\n    if (this.disabled) {\r\n      return false;\r\n    }\r\n\r\n    const found = this.isSelected(item);\r\n    const allowAdd =\r\n      this._settings.limitSelection === -1 ||\r\n      (this._settings.limitSelection > 0 &&\r\n        this.selectedItems.length < this._settings.limitSelection);\r\n    if (!found) {\r\n      if (allowAdd) {\r\n        this.addSelected(item);\r\n      }\r\n    } else {\r\n      this.removeSelected(item);\r\n    }\r\n    if (\r\n      this._settings.singleSelection &&\r\n      this._settings.closeDropDownOnSelection\r\n    ) {\r\n      this.closeDropdown();\r\n    }\r\n  }\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\n  writeValue(value: any) {\r\n    if (value !== undefined && value !== null && value.length > 0) {\r\n      if (this._settings.singleSelection) {\r\n        try {\r\n          if (value.length >= 1) {\r\n            const firstItem = value[0];\r\n            this.selectedItems = [\r\n              typeof firstItem === 'string'\r\n                ? new ListItem(firstItem)\r\n                : new ListItem({\r\n                  id: firstItem[this._settings.idField],\r\n                  text: firstItem[this._settings.textField]\r\n                })\r\n            ];\r\n          }\r\n        } catch (e) {\r\n          // console.error(e.body.msg);\r\n        }\r\n      } else {\r\n        const _data = value.map(\r\n          (item: any) =>\r\n            typeof item === 'string'\r\n              ? new ListItem(item)\r\n              : new ListItem({\r\n                id: item[this._settings.idField],\r\n                text: item[this._settings.textField]\r\n              })\r\n        );\r\n        if (this._settings.limitSelection > 0) {\r\n          this.selectedItems = _data.splice(0, this._settings.limitSelection);\r\n        } else {\r\n          this.selectedItems = _data;\r\n        }\r\n      }\r\n    } else {\r\n      this.selectedItems = [];\r\n    }\r\n    this.onChangeCallback(value);\r\n  }\r\n\r\n  // From ControlValueAccessor interface\r\n  registerOnChange(fn: any) {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  // From ControlValueAccessor interface\r\n  registerOnTouched(fn: any) {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  // Set touched on blur\r\n  @HostListener('blur')\r\n  public onTouched() {\r\n    this.closeDropdown();\r\n    this.onTouchedCallback();\r\n  }\r\n\r\n  trackByFn(index, item) {\r\n    return item.id;\r\n  }\r\n\r\n  isSelected(clickedItem: ListItem) {\r\n    let found = false;\r\n    this.selectedItems.forEach(item => {\r\n      if (clickedItem.id === item.id) {\r\n        found = true;\r\n      }\r\n    });\r\n    return found;\r\n  }\r\n\r\n  isLimitSelectionReached(): boolean {\r\n    return this._settings.limitSelection === this.selectedItems.length;\r\n  }\r\n\r\n  isAllItemsSelected(): boolean {\r\n    return this._data.length === this.selectedItems.length;\r\n  }\r\n\r\n  showButton(): boolean {\r\n    if (!this._settings.singleSelection) {\r\n      if (this._settings.limitSelection > 0) {\r\n        return false;\r\n      }\r\n      // this._settings.enableCheckAll = this._settings.limitSelection === -1 ? true : false;\r\n      return true; // !this._settings.singleSelection && this._settings.enableCheckAll && this._data.length > 0;\r\n    } else {\r\n      // should be disabled in single selection mode\r\n      return false;\r\n    }\r\n  }\r\n\r\n  itemShowRemaining(): number {\r\n    return this.selectedItems.length - this._settings.itemsShowLimit;\r\n  }\r\n\r\n  addSelected(item: ListItem) {\r\n    if (this._settings.singleSelection) {\r\n      this.selectedItems = [];\r\n      this.selectedItems.push(item);\r\n    } else {\r\n      this.selectedItems.push(item);\r\n    }\r\n    this.onChangeCallback(this.emittedValue(this.selectedItems));\r\n    this.onSelect.emit(this.emittedValue(item));\r\n  }\r\n\r\n  removeSelected(itemSel: ListItem) {\r\n    this.selectedItems.forEach(item => {\r\n      if (itemSel.id === item.id) {\r\n        this.selectedItems.splice(this.selectedItems.indexOf(item), 1);\r\n      }\r\n    });\r\n    this.onChangeCallback(this.emittedValue(this.selectedItems));\r\n    this.onDeSelect.emit(this.emittedValue(itemSel));\r\n  }\r\n\r\n  emittedValue(val: any): any {\r\n    const selected = [];\r\n    if (Array.isArray(val)) {\r\n      val.map(item => {\r\n        if (item.id === item.text) {\r\n          selected.push(item.text);\r\n        } else {\r\n          selected.push(this.objectify(item));\r\n        }\r\n      });\r\n    } else {\r\n      if (val) {\r\n        if (val.id === val.text) {\r\n          return val.text;\r\n        } else {\r\n          return this.objectify(val);\r\n        }\r\n      }\r\n    }\r\n    return selected;\r\n  }\r\n\r\n  objectify(val: ListItem) {\r\n    const obj = {};\r\n    obj[this._settings.idField] = val.id;\r\n    obj[this._settings.textField] = val.text;\r\n    return obj;\r\n  }\r\n\r\n  toggleDropdown(evt) {\r\n    evt.preventDefault();\r\n\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this._settings.defaultOpen = !this._settings.defaultOpen;\r\n    if (this._settings.defaultOpen) {\r\n      setTimeout(() => {\r\n        const temp = this.Section.nativeElement.querySelectorAll('.filter-textbox');\r\n        if (temp && temp.length > 0 && temp[0].childNodes && temp[0].childNodes[0]) {\r\n          temp[0].childNodes[0].focus();\r\n        }\r\n      }, 100);\r\n    }\r\n    if (!this._settings.defaultOpen) {\r\n      this.onDropDownClose.emit();\r\n    }\r\n  }\r\n  public toggleDropdownExternal() {\r\n    if (!this.disabled) {\r\n      if (!this._settings.defaultOpen) {\r\n        setTimeout(() => {\r\n          if (this.dropdownbtn) {\r\n            this.dropdownbtn.nativeElement.click();\r\n          }\r\n        }, 100);\r\n      } else {\r\n        this.closeDropdown();\r\n      }\r\n    }\r\n  }\r\n\r\n  closeDropdown() {\r\n\r\n    this._settings.defaultOpen = false;\r\n    // clear search text\r\n    if (this._settings.clearSearchFilter) {\r\n      this.filter.text = '';\r\n    }\r\n    this.onDropDownClose.emit();\r\n  }\r\n\r\n  toggleSelectAll() {\r\n    if (this.disabled) {\r\n      return false;\r\n    }\r\n    if (!this.isAllItemsSelected()) {\r\n      this.selectedItems = this._data.slice();\r\n      this.onSelectAll.emit(this.emittedValue(this.selectedItems));\r\n    } else {\r\n      this.selectedItems = [];\r\n      this.onDeSelectAll.emit(this.emittedValue(this.selectedItems));\r\n    }\r\n    this.onChangeCallback(this.emittedValue(this.selectedItems));\r\n  }\r\n}\r\n","import {Directive, ElementRef, Output, EventEmitter, HostListener} from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[clickOutside]'\r\n})\r\nexport class ClickOutsideDirective {\r\n    constructor(private _elementRef: ElementRef) {\r\n    }\r\n\r\n    @Output()\r\n    public clickOutside = new EventEmitter<MouseEvent>();\r\n\r\n    @HostListener('document:click', ['$event', '$event.target'])\r\n    public onClick(event: MouseEvent, targetElement: HTMLElement): void {\r\n        if (!targetElement) {\r\n            return;\r\n        }\r\n\r\n        const clickedInside = this._elementRef.nativeElement.contains(targetElement);\r\n        if (!clickedInside) {\r\n            this.clickOutside.emit(event);\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { ListItem } from './multiselect.model';\r\n\r\n@Pipe({\r\n    name: 'ng2ListFilter',\r\n    pure: false\r\n})\r\nexport class ListFilterPipe implements PipeTransform {\r\n    transform(items: ListItem[], filter: ListItem): ListItem[] {\r\n        if (!items || !filter) {\r\n            return items;\r\n        }\r\n        return items.filter((item: ListItem) => this.applyFilter(item, filter));\r\n    }\r\n\r\n    applyFilter(item: ListItem, filter: ListItem): boolean {\r\n        return !(filter.text && item.text && item.text.toLowerCase().indexOf(filter.text.toLowerCase()) === -1);\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MultiSelectComponent } from './multiselect.component';\r\nimport { ClickOutsideDirective } from './click-outside.directive';\r\nimport { ListFilterPipe } from './list-filter.pipe';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule],\r\n  declarations: [MultiSelectComponent, ClickOutsideDirective, ListFilterPipe],\r\n  exports: [MultiSelectComponent]\r\n})\r\n\r\nexport class NgMultiSelectDropDownModule {\r\n    static forRoot(): ModuleWithProviders {\r\n      return {\r\n        ngModule: NgMultiSelectDropDownModule\r\n      };\r\n    }\r\n}\r\n"]}